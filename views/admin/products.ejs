<%- include('../partials/admin/admin-header') %>
<link  href="https://unpkg.com/cropperjs@1.5.13/dist/cropper.min.css" rel="stylesheet"/>
<script src="https://unpkg.com/cropperjs@1.5.13/dist/cropper.min.js"></script>

<link rel="stylesheet" href="/css/admin/category.css">
<div class="product-page">
  <div class="product-header">
    <h2>Products</h2>
    <div class="search-bar">
      <input type="text" placeholder="Search for products" id="searchBox">
      <button id="searchBtn">Search</button>
      <button id="resetBtn">Reset</button>
      <button class="demo-button" onclick="openModal()">Add Product +</button>
    </div>
  </div>
  <div class="table-responsive">
    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>Product Image</th>
          <th>Product Name</th>
          <th>Category</th>
          <th>Color</th>
          <th>Stock</th>
          <th>Price</th>
          <th>New Arrival</th>
          <th>Last Updated</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="productTable">
        <% if (products && products.length > 0) { %>
          <% products.forEach((product, index) => { %>
            <tr>
              <td><%= product._id.toString().slice(-6) %></td>
              <td>
  <% if (product.images && product.images.length > 0) { %>
<img src="/<%= product.images[0] %>" alt="<%= product.productName %>" style="width: 50px; height: 50px; object-fit: cover; border-radius: 4px;">
  <% } else { %>
    <div style="width: 50px; height: 50px; background-color: #f8f9fa; border-radius: 4px; display: flex; align-items: center; justify-content: center;">
      ðŸ“·
    </div>
  <% } %>
</td>

              <td><%= product.productName %></td>
              <td><%= product.category.name %></td>
              <td><%= product.color %></td>
              <td><%= product.stock %></td>
              <td>â‚¹<%= product.price %></td>
              <td>
                <% if (product.isNewArrival) { %>
                  <span class="new-arrival-badge">New</span>
                <% } else { %>
                  <span>-</span>
                <% } %>
              </td>
              <!-- <td><%= new Date(product.updatedAt || product.createdAt).toLocaleDateString() %></td> -->
              <td>
              <button 
    class="action-btn <%= product.isActive ? 'unblock-btn' : 'block-btn' %>" 
    onclick="toggleProductStatus('<%= product._id %>', <%= !product.isActive %>)">
    <%= product.isActive ? 'Active' : 'Inactive' %>
  </button>
              </td>
              
              <td>
                <button class="action-btn edit-btn" onclick="editProduct('<%= product._id %>')">Edit</button>
                <button class="action-btn delete-btn" onclick="deleteProduct('<%= product._id %>')">Delete</button>
                <button class="action-btn view-btn" onclick="viewProduct('<%= product._id %>')">View</button>
              </td>
            </tr>
          <% }) %>
        <% } else { %>
          <tr>
            <td colspan="10" style="text-align: center; padding: 40px;">No products found</td>
          </tr>
        <% } %>
      </tbody>
    </table>
  </div>
  <div class="pagination">
  <% if (typeof currentPage !== 'undefined' && typeof totalPages !== 'undefined' && totalPages > 0) { %>
    <button id="prevPage" onclick="goToPrevPage()" <%= currentPage <= 1 ? 'disabled' : '' %>>&laquo;</button>
    <% for (let i = 1; i <= totalPages; i++) { %>
<button class="<%= i === currentPage ? 'active' : '' %>" onclick="goToPage(<%- i %>)"><%= i %></button>
    <% } %>
    <button id="nextPage" onclick="goToNextPage()" <%= currentPage >= totalPages ? 'disabled' : '' %>>&raquo;</button>
  <% } else { %>
    <button disabled>&laquo;</button>
    <button class="active">1</button>
    <button disabled>&raquo;</button>
  <% } %>
</div>

<!-- Enhanced Modal -->
<div class="modal-overlay" id="productModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Add Product</h3>
            <button type="button" class="close-btn" onclick="closeModal()">&times;</button>
        </div>
        <form id="productForm" enctype="multipart/form-data">
            <div class="modal-body">
                <div class="form-row">
                    <div class="form-group">
                        <label for="productName">Product Name *</label>
                        <input type="text" id="productName" name="productName" required>
                    </div>
                    <div class="form-group">
                        <label for="category">Category *</label>
                        <select id="category" name="category" required>
                            <option value="">Select Category</option>
                            <% if (category && category.length > 0) { %>
                                <% category.forEach(category => { %>
                                    <option value="<%= category._id %>"><%= category.name %></option>
                                <% }) %>
                            <% } %>
                        </select>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="price">Price *</label>
                        <input type="number" id="price" name="price" min="0" step="0.01" required>
                    </div>
                    <div class="form-group">
                        <label for="stock">Stock *</label>
                        <input type="number" id="stock" name="stock" min="0" required>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="color">Color</label>
                        <input type="text" id="color" name="color">
                    </div>
                    
                </div>
                
                <div class="form-group">
                    <label for="description">Description</label>
                    <textarea id="description" name="description" rows="4"></textarea>
                </div>
                
                <!-- <div class="form-group">
                    <label for="images">Product Images</label>
                    <input type="file" id="images" name="images" multiple accept="image/*">
                    <small>You can select multiple images</small>
                <div id="previewArea" style="margin-top: 10px; display: flex; flex-wrap: wrap; gap: 10px;"></div>
                </div> -->
                <div class="form-group">
    <label for="cropImageInput">Product Images (Crop & Upload Multiple)</label>
    <input type="file" id="cropImageInput" accept="image/*" multiple>
    <div id="previewArea" style="display: flex; gap: 10px; margin-top: 10px;"></div>

    <div style="margin-top: 10px;">
      <img id="cropPreview" style="display: none;" />
    </div>
    <button type="button" class="btn btn-primary" id="cropButton" style="display: none;">Crop & Add</button>
  </div>

  <div style="margin-top: 20px;">
    <h4>Cropped Images:</h4>
    
    <div id="croppedImageList" style="display: flex; flex-wrap: wrap;"></div>
  </div>
                
                <div class="form-group checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" id="isNewArrival" name="isNewArrival">
                        <span class="checkmark"></span>
                        Mark as New Arrival
                    </label>
                </div>
                
                <div class="form-group checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" id="isActive" name="isActive" checked>
                        <span class="checkmark"></span>
                        Active Product
                    </label>
                </div>
            </div>
            
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                <button type="submit" class="btn btn-primary">Save Product</button>
            </div>
        </form>
    </div>
</div>

<!-- View Product Modal -->
<div class="modal-overlay" id="viewProductModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Product Details</h3>
            <button type="button" class="close-btn" onclick="closeViewModal()">&times;</button>
        </div>
        <div class="modal-body" id="viewProductContent">
            <!-- Product details will be loaded here -->
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" onclick="closeViewModal()">Close</button>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal-overlay" id="deleteModal">
    <div class="modal-content small-modal">
        <div class="modal-header">
            <h3 class="modal-title">Confirm Delete</h3>
            <button type="button" class="close-btn" onclick="closeDeleteModal()">&times;</button>
        </div>
        <div class="modal-body">
            <p>Are you sure you want to delete this product? This action cannot be undone.</p>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" onclick="closeDeleteModal()">Cancel</button>
            <button type="button" class="btn btn-danger" onclick="confirmDelete()">Delete</button>
        </div>
    </div>
</div>

<script>
let currentProductId = null;
let deleteProductId = null;

// Modal Functions
function openModal() {
    document.getElementById('productModal').style.display = 'flex';
    document.querySelector('.modal-title').textContent = 'Add Product';
    document.getElementById('productForm').reset();
    currentProductId = null;
}

function closeModal() {
    document.getElementById('productModal').style.display = 'none';
    document.getElementById('productForm').reset();
    currentProductId = null;
}

function closeViewModal() {
    document.getElementById('viewProductModal').style.display = 'none';
}

function closeDeleteModal() {
    document.getElementById('deleteModal').style.display = 'none';
    deleteProductId = null;
}

// Product CRUD Operations
let removedImages=[];
function editProduct(productId) {
    currentProductId = productId;
    //reset everything here 
    document.getElementById('productForm').reset();
  document.getElementById('croppedImageList').innerHTML = '';
  previewArea.innerHTML = '';
    removedImages=[];

  
  
  fetch(`/admin/products/${productId}/details`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(product => {
        // Fill basic fields
        document.getElementById('productName').value = product.productName || '';
        document.getElementById('category').value = product.category._id || '';
        document.getElementById('price').value = product.price || '';
        document.getElementById('stock').value = product.stock || '';
        document.getElementById('color').value = product.color || '';
        document.getElementById('description').value = product.description || '';
        document.getElementById('isNewArrival').checked = product.isNewArrival || false;
        document.getElementById('isActive').checked = product.isActive !== false;

        // // Clear old previews
        // const croppedImageList = document.getElementById("croppedImageList");
        // croppedImageList.innerHTML = "";

        // const previewArea = document.getElementById("previewArea");
        // previewArea.innerHTML = "";

        // Show existing images
        if (product.images && product.images.length > 0) {
            product.images.forEach((imgPath, index) => {
                const wrapper = document.createElement("div");
                  wrapper.classList.add("existing-image");
                wrapper.style.position = "relative";
                // wrapper.style.display = "inline-block";
                // wrapper.style.marginRight = "10px";

                const img = document.createElement("img");
                img.src = `/${imgPath}`;
                img.style.width = "60px";
                img.style.height = "60px";
                img.style.objectFit = "cover";
                img.style.borderRadius = "4px";
                img.style.marginRight = "10px";

                const removeBtn = document.createElement("button");
          removeBtn.innerHTML = "&times;";
          removeBtn.classList.add("remove-existing-btn");
          removeBtn.style.position = "absolute";
          removeBtn.style.top = "-6px";
          removeBtn.style.right = "-6px";

          removeBtn.addEventListener("click", () => {
            wrapper.remove(); // visually remove
            removedImages.push(imgPath); // track for backend
          });
          
          wrapper.appendChild(img);
          wrapper.appendChild(removeBtn);
          previewArea.appendChild(wrapper);
        });
      }
        document.querySelector('.modal-title').textContent = 'Edit Product';
  document.getElementById('productModal').style.display = 'flex';
   
    })


 .catch(error => {
      console.error('Error fetching product:', error);
      alert('Error loading product data');
    });
}

               
     

function viewProduct(productId) {
  fetch(`/admin/products/${productId}/details`)
    .then(response => response.json())
    .then(product => {
      const content = `
        <div class="product-view">
          <div class="product-images">
            ${product.images && product.images.length > 0
              ? product.images
                  .map(
                    img => `<img src="/${img}" alt="${product.productName}" style="width: 100px; height: 100px; object-fit: cover; margin: 5px; border-radius: 4px;">`
                  )
                  .join('')
              : '<div style="width: 100px; height: 100px; background-color: #f8f9fa; border-radius: 4px; display: flex; align-items: center; justify-content: center;">ðŸ“·</div>'
            }
          </div>
          <div class="product-info">
            <h4>${product.productName}</h4>
            <p><strong>Category:</strong> ${product.category?.name || 'N/A'}</p>
            <p><strong>Price:</strong> â‚¹${product.price}</p>
            <p><strong>Stock:</strong> ${product.stock}</p>
            <p><strong>Color:</strong> ${product.color || 'N/A'}</p>
            <p><strong>Size:</strong> ${product.size || 'N/A'}</p>
            <p><strong>New Arrival:</strong> ${product.isNewArrival ? 'Yes' : 'No'}</p>
            <p><strong>Status:</strong> ${product.isActive !== false ? 'Active' : 'Inactive'}</p>
            ${
              product.description
                ? `<p><strong>Description:</strong> ${product.description}</p>`
                : ''
            }
            <p><strong>Created:</strong> ${new Date(product.createdAt).toLocaleDateString()}</p>
            <p><strong>Last Updated:</strong> ${new Date(product.updatedAt || product.createdAt).toLocaleDateString()}</p>
          </div>
        </div>
      `;

      document.getElementById('viewProductContent').innerHTML = content;
      document.getElementById('viewProductModal').style.display = 'flex';
    })
    .catch(error => {
      console.error('Error fetching product:', error);
      alert('Error loading product details');
    });
}

function deleteProduct(productId) {
    deleteProductId = productId;
    document.getElementById('deleteModal').style.display = 'flex';
}

function confirmDelete() {
    if (!deleteProductId) return;
    
    fetch(`/admin/products/${deleteProductId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            location.reload();
        } else {
            alert(data.message || 'Error deleting product');
        }
    })
    .catch(error => {
        console.error('Error deleting product:', error);
        alert('Error deleting product');
    })
    .finally(() => {
        closeDeleteModal();
    });
}

// Form Submission
document.getElementById('productForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const url = '/admin/products';
    // const method =  'POST';
    
 if (currentProductId) {
        formData.append('id', currentProductId); // Add product ID for backend to detect update
      
        
    }
    

croppedImages.forEach((blob,index)=>{
    formData.append('images',blob,`image${Date.now()}_${index}.jpg`);
});

// Append removed images (from edit modal)
    formData.append('removedImages', JSON.stringify(removedImages));


for (let [key, value] of formData.entries()) {
  console.log(key, value);
}


    fetch(url, {
        method: 'POST',
        body: formData
    })
.then(res => {
    if (!res.ok) throw new Error("HTTP " + res.status);
    return res.json();
})
    .then(data => {
        if (data.success) {
            location.reload();
        } else {
            alert(data.message || 'Error saving product');
        }
    })
    .catch(error => {
        console.error('Error saving product:', error);
        alert('Error saving product');
    });
});

// Search Functionality
document.getElementById('searchBtn').addEventListener('click', function() {
    const searchTerm = document.getElementById('searchBox').value;
    if (searchTerm.trim()) {
        window.location.href = `/admin/products?search=${encodeURIComponent(searchTerm)}`;
    }
});

document.getElementById('resetBtn').addEventListener('click', function() {
    document.getElementById('searchBox').value = '';
    window.location.href = '/admin/products';
});

document.getElementById('searchBox').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        document.getElementById('searchBtn').click();
    }
});

//functionalities of image crop and add
const input=document.getElementById("cropImageInput");
const preview=document.getElementById("cropPreview");
const cropButton=document.getElementById("cropButton");
const croppedImageList=document.getElementById("croppedImageList");
const previewArea = document.getElementById("previewArea");

input.addEventListener("change", function (e) {
    filesQueue = Array.from(e.target.files); // refresh queue
    currentFileIndex = 0;
   if (filesQueue.length > 0) {
        croppedImages = [];
    }
    // Show raw image previews before cropping
    previewArea.innerHTML = '';
    filesQueue.forEach((file, index) => {
  const reader = new FileReader();
  reader.onload = function (event) {
    const wrapper = document.createElement("div");
    wrapper.style.position = "relative";
    wrapper.style.display = "inline-block";

    const img = document.createElement("img");
    img.src = event.target.result;
    img.style.width = "60px";
    img.style.height = "60px";
    img.style.objectFit = "cover";
    img.style.borderRadius = "4px";
    img.style.marginRight = "10px";

    
    const removeBtn = document.createElement("button");
    removeBtn.innerHTML = "&times;";
    removeBtn.style.position = "absolute";
    removeBtn.style.top = "-6px";
    removeBtn.style.right = "-6px";
    removeBtn.style.background = "transparent";
    removeBtn.style.color = "#000";
    removeBtn.style.border = "1px solid #fff";
    removeBtn.style.borderRadius = "50%";
    removeBtn.style.cursor = "pointer";
    removeBtn.style.width = "20px";
    removeBtn.style.height = "20px";
    removeBtn.style.fontSize = "14px";
    removeBtn.style.lineHeight = "16px";
    removeBtn.style.padding = "0";

    
    removeBtn.addEventListener("click", () => {
      filesQueue.splice(index, 1); 
      wrapper.remove(); 
    });

    wrapper.appendChild(img);
    wrapper.appendChild(removeBtn);
    previewArea.appendChild(wrapper);
  };
  reader.readAsDataURL(file);
});


    loadNextImage(); // start cropping first image
});

let filesQueue=[];
let currentFileIndex=0;
let cropper;
let croppedImages=[];
function loadNextImage(){
    if(currentFileIndex>=filesQueue.length){
        cropButton.style.display="none";
        preview.style.display="none";
        return;
    }
    const file =filesQueue[currentFileIndex];
    const reader=new FileReader();
    reader.onload=function(event){
        preview.src=event.target.result;
        preview.style.display="block";
        cropButton.style.display="inline-block";
        if(cropper)cropper.destroy();
        cropper=new Cropper(preview,{
            aspectRatio: 1, 
  viewMode: 1,     
  autoCropArea: 1, 
  responsive: true,
  scalable: true,
  zoomable: true
        });
    };
    reader.readAsDataURL(file);

}
cropButton.addEventListener("click",function(){
    const canvas =cropper.getCroppedCanvas();
    canvas.toBlob(function(blob){
        const imageUrl=URL.createObjectURL(blob);
        // Add cropped image preview
        const container = document.createElement("div");
container.style.border = "1px solid #ccc";
container.style.borderRadius = "8px";
container.style.padding = "8px";
container.style.background = "#f9f9f9";
container.style.width = "120px";
container.style.textAlign = "center";

const img = document.createElement("img");
img.src = imageUrl;
img.style.width = "100%";
img.style.height = "100px";
img.style.objectFit = "cover";
img.style.borderRadius = "4px";

const indexLabel = document.createElement("div");
indexLabel.textContent = `Image ${croppedImages.length + 1}`;
indexLabel.style.marginTop = "5px";
indexLabel.style.fontSize = "12px";
indexLabel.style.color = "#333";

container.appendChild(img);
container.appendChild(indexLabel);

croppedImageList.appendChild(container);


        // Store blob for upload later (optional)
        croppedImages.push(blob);
        console.log("Cropped image added:", blob);
        console.log("Total so far:", croppedImages.length);

        cropper.destroy();
        preview.style.display = "none";
        cropButton.style.display = "none";

        currentFileIndex++;
        loadNextImage();
    });
});






// Pagination variables from server
var currentPage = parseInt('<%= currentPage || 1 %>');
var totalPages = parseInt('<%= totalPages || 1 %>');

// Pagination
function goToPage(page) {
    const urlParams = new URLSearchParams(window.location.search);
    urlParams.set('page', page);
    window.location.href = `/admin/products?${urlParams.toString()}`;
}

function goToPrevPage() {
    if (currentPage > 1) {
        goToPage(currentPage - 1);
    }
}

function goToNextPage() {
    if (currentPage < totalPages) {
        goToPage(currentPage + 1);
    }
}
//toggleProduct Status functionality
function toggleProductStatus(productId,newStatus){
    fetch(`/admin/products/status/${productId}`,{
        method:'PUT',
        headers:{
            'Content-Type':'application/json'
        },
        body:JSON.stringify({isActive:newStatus})
    })
    .then(response=>response.json())
    .then(data=>{
        if(data.success){
            location.reload();
        }else{
            alert('failed to update status');
        }
    })
    .catch(err=>{
        console.error('error updating product status:',err);
        alert('error occured while updating the status ')
    })
}

// Close modals when clicking outside
window.addEventListener('click', function(e) {
    if (e.target.classList.contains('modal-overlay')) {
        if (e.target.id === 'productModal') closeModal();
        if (e.target.id === 'viewProductModal') closeViewModal();
        if (e.target.id === 'deleteModal') closeDeleteModal();
    }
});
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<%- include('../partials/admin/admin-footer') %>