<%- include('../partials/admin/admin-header') %>
<link rel="stylesheet" href="/css/admin/offer.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link rel="stylesheet" href="/css/admin/coupon.css">

<div class="coupon-section">
  <div class="coupon-header">
    <h2>Coupons</h2>
    <div class="add-coupon-btn">
      <button id="addCouponBtn">Add Coupons</button>
    </div>
  </div>

  <% if (coupons.length > 0) { %>
    <table class="coupon-table">
      <thead>
        <tr>
          <th>Sl.No.</th>
          <th>Coupon</th>
          <th>Discount</th>
          <th>Min Cart Value</th>
          <th>Min Discount</th>
          <th>Max Discount</th>
          <th>Coupon Code</th>
          <th>Valid Till</th>
          <th>Status</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <% coupons.forEach((coupon, index) => { %>
          <tr>
            <td><%= index + 1 %>.</td>
            <td><%= coupon.description %></td>
            <td>
              <% if (coupon.discountType === 'percentage') { %>
                <%= coupon.discountValue %>%
              <% } else { %>
                Rs.<%= coupon.discountValue || coupon.redeemAmount || 0 %>
              <% } %>
            </td>
            <td>Rs.<%= coupon.minCartValue || 0 %></td>
            <td>Rs.<%= coupon.minDiscount || 0 %></td>
            <td><%= coupon.maxDiscount ? 'Rs.' + coupon.maxDiscount : 'N/A' %></td>
            <td>#<%= coupon.code %></td>
            <td><%= new Date(coupon.validTill).toLocaleDateString('en-GB') %></td>
            <td>
              <span class="status-badge <%= coupon.isActive ? 'active' : 'inactive' %>">
                <%= coupon.isActive ? 'Active' : 'Inactive' %>
              </span>
            </td>
            <td class="action-buttons">
              <button class="edit-btn" data-id="<%= coupon._id %>">‚úèÔ∏è</button>
              <button class="delete-btn" data-id="<%= coupon._id %>">üóë</button>
            </td>
          </tr>
        <% }); %>
      </tbody>
    </table>
  <% } else { %>
    <div class="no-coupons-message">
      <p>No coupons available at the moment.</p>
      <p>Click "Add Coupons" to create new offers for your customers!</p>
    </div>
  <% } %>
</div>

<!-- Coupon Modal -->
<div id="couponModal" class="modal">
  <div class="modal-content">
    <span class="close-modal">&times;</span>
    <h2 id="modalTitle">Add New Coupon</h2>
    <form id="couponForm">
      <input type="hidden" id="couponId" name="id">
      
      <div class="form-group">
        <label for="code">Coupon Code*</label>
        <input type="text" id="code" name="code" required placeholder="e.g., SUMMER20" class="uppercase-input">
        <small class="input-hint">(Will be automatically converted to uppercase)</small>
      </div>

      <div class="form-group">
        <label for="description">Coupon Description*</label>
        <input type="text" id="description" name="description" required placeholder="e.g., Summer Sale 20% off">
      </div>

      <div class="form-group">
        <label>Discount Type*</label>
        <div class="toggle-group">
          <button type="button" class="toggle-btn active" data-value="fixed">Fixed Amount</button>
          <button type="button" class="toggle-btn" data-value="percentage">Percentage</button>
          <input type="hidden" id="discountType" name="discountType" value="fixed">
        </div>
      </div>

      <div class="form-group" id="discountValueGroup">
        <label for="discountValue" id="discountValueLabel">Discount Value (Rs.)*</label>
        <input type="number" id="discountValue" name="discountValue" required min="0" step="0.01" placeholder="Enter discount amount">
      </div>
      
      <div class="form-group">
        <label for="minCartValue">Minimum Cart Value (Rs.)*</label>
        <input type="number" id="minCartValue" name="minCartValue" required min="0" step="0.01" placeholder="0">
      </div>

      <div class="form-group">
        <label for="minDiscount">Minimum Discount (Rs.)*</label>
        <input type="number" id="minDiscount" name="minDiscount" required min="0" step="0.01" placeholder="0">
      </div>

      <div class="form-group" id="maxDiscountGroup" style="display:none;">
        <label for="maxDiscount">Maximum Discount (Rs.)*</label>
        <input type="number" id="maxDiscount" name="maxDiscount" min="0" step="0.01" placeholder="Maximum discount limit">
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="validFrom">Valid From*</label>
          <input type="datetime-local" id="validFrom" name="validFrom" required>
        </div>
        
        <div class="form-group">
          <label for="validTill">Valid Till*</label>
          <input type="datetime-local" id="validTill" name="validTill" required>
        </div>
      </div>
      
      <div class="form-row">
        <div class="form-group">
          <label for="usageLimit">Usage Limit</label>
          <input type="number" id="usageLimit" name="usageLimit" min="1" placeholder="Leave empty for unlimited">
        </div>
        
        <div class="form-group checkbox-group">
          <input type="checkbox" id="isActive" name="isActive" checked>
          <label for="isActive">Active Coupon</label>
        </div>
      </div>
      
      <div class="form-actions">
        <button type="submit" class="submit-btn">Save Coupon</button>
        <button type="button" class="cancel-btn">Cancel</button>
      </div>
    </form>
  </div>
</div>

<div id="loadingIndicator" style="display:none; text-align:center; margin: 15px;">
  <div class="spinner-border text-primary" role="status">
    <span class="visually-hidden">Loading...</span>
  </div>
</div>

<%- include('../partials/admin/admin-footer') %>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // API Configuration
  const API_BASE_URL = '/admin/coupons';
  const API_HEADERS = {
    'Content-Type': 'application/json',
  };

  // DOM Elements
  const modal = document.getElementById('couponModal');
  const addBtn = document.getElementById('addCouponBtn');
  const closeBtn = document.querySelector('.close-modal');
  const cancelBtn = document.querySelector('.cancel-btn');
  const modalTitle = document.getElementById('modalTitle');
  const couponForm = document.getElementById('couponForm');
  const loadingIndicator = document.getElementById('loadingIndicator');
  
  let isSubmitting = false;

  setupEventListeners();
  setDefaultDates();

  function setupEventListeners() {
    addBtn.addEventListener('click', openAddModal);
    closeBtn.addEventListener('click', closeModal);
    cancelBtn.addEventListener('click', closeModal);
    
    window.addEventListener('click', (e) => e.target === modal && closeModal());

    couponForm.addEventListener('submit', handleFormSubmit);

    document.querySelectorAll('.toggle-btn').forEach(button => {
      button.addEventListener('click', function() {
        document.querySelectorAll('.toggle-btn').forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
        document.getElementById('discountType').value = this.dataset.value;
        
        const discountValueLabel = document.getElementById('discountValueLabel');
        const maxDiscountGroup = document.getElementById('maxDiscountGroup');
        
        if (this.dataset.value === 'percentage') {
          discountValueLabel.textContent = 'Discount Percentage (%)*';
          maxDiscountGroup.style.display = 'block';
          document.getElementById('maxDiscount').required = true;
        } else {
          discountValueLabel.textContent = 'Discount Value (Rs.)*';
          maxDiscountGroup.style.display = 'none';
          document.getElementById('maxDiscount').required = false;
        }
      });
    });

    document.getElementById('code').addEventListener('input', function() {
      this.value = this.value.toUpperCase();
    });

    document.addEventListener('click', async (e) => {
      if (e.target.classList.contains('edit-btn')) {
        await handleEditClick(e);
      } else if (e.target.classList.contains('delete-btn')) {
        handleDeleteClick(e);
      }
    });
  }

  function setDefaultDates() {
    const now = new Date();
    const validFrom = new Date(now);
    const validTill = new Date(now);
    validTill.setDate(validTill.getDate() + 30); // 30 days from now

    document.getElementById('validFrom').value = formatDateForInput(validFrom);
    document.getElementById('validTill').value = formatDateForInput(validTill);
  }

  function formatDateForInput(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0'); // months are 0-based
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    return `${year}-${month}-${day}T${hours}:${minutes}`;
}


  function generateCouponCode(length = 8) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let code = '';
    for (let i = 0; i < length; i++) {
      code += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return code;
  }

  function openAddModal() {
    couponForm.reset();
    document.getElementById('couponId').value = '';
    document.getElementById('code').value = generateCouponCode();
    modalTitle.textContent = 'Add New Coupon';
    
    // Reset discount type to fixed
    document.querySelectorAll('.toggle-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelector('.toggle-btn[data-value="fixed"]').classList.add('active');
    document.getElementById('discountType').value = 'fixed';
    document.getElementById('maxDiscountGroup').style.display = 'none';
    document.getElementById('discountValueLabel').textContent = 'Discount Value (Rs.)*';
    
    setDefaultDates();
    modal.style.display = 'block';
    document.getElementById('description').focus();
  }

  async function openEditModal(coupon) {
    modalTitle.textContent = `Edit Coupon`;
    document.getElementById('couponId').value = coupon._id;
    document.getElementById('code').value = coupon.code;
    document.getElementById('description').value = coupon.description;
    document.getElementById('discountValue').value = coupon.discountValue || coupon.redeemAmount || 0;
    document.getElementById('minCartValue').value = coupon.minCartValue || 0;
    document.getElementById('discountValue').value = coupon.discountValue || coupon.redeemAmount || 0;
    document.getElementById('maxDiscount').value = coupon.maxDiscount || '';
    document.getElementById('minDiscount').value=coupon.minDiscount || '';
    document.getElementById('validFrom').value = coupon.validFrom ? formatDateForInput(new Date(coupon.validFrom)) : '';
    document.getElementById('validTill').value = coupon.validTill? formatDateForInput(new Date(coupon.validTill)):'';
    document.getElementById('usageLimit').value = coupon.usageLimit || '';
    document.getElementById('isActive').checked = coupon.isActive !== false;

    // Set discount type
    const discountType = coupon.discountType || 'fixed';
    document.querySelectorAll('.toggle-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelector(`[data-value="${discountType}"]`).classList.add('active');
    document.getElementById('discountType').value = discountType;
    
    const discountValueLabel = document.getElementById('discountValueLabel');
    if (discountType === 'percentage') {
      discountValueLabel.textContent = 'Discount Percentage (%)*';
      document.getElementById('maxDiscountGroup').style.display = 'block';
      document.getElementById('maxDiscount').required = true;
    } else {
      discountValueLabel.textContent = 'Discount Value (Rs.)*';
      document.getElementById('maxDiscountGroup').style.display = 'none';
      document.getElementById('maxDiscount').required = false;
    }

    modal.style.display = 'block';
    document.getElementById('description').focus();
  }

  function closeModal() {
    modal.style.display = 'none';
  }

  function showLoading() {
    loadingIndicator.style.display = 'block';
    document.querySelectorAll('button').forEach(btn => btn.disabled = true);
  }

  function hideLoading() {
    loadingIndicator.style.display = 'none';
    document.querySelectorAll('button').forEach(btn => btn.disabled = false);
  }

  function showAlert(type, message) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
    alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 400px;';
    alertDiv.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    document.body.appendChild(alertDiv);
    setTimeout(() => alertDiv.remove(), 5000);
  }

  async function fetchCoupon(couponId) {
    try {
      const response = await fetch(`${API_BASE_URL}/${couponId}`);
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      return await response.json();
    } catch (error) {
      showAlert('error', `Failed to fetch coupon: ${error.message}`);
      console.error('Error fetching coupon:', error);
      throw error;
    }
  }

  async function saveCoupon(formData) {
    const couponId = formData.get('id');
    const url = couponId ? `${API_BASE_URL}/edit-coupon/${couponId}` : `${API_BASE_URL}/add-coupon`;
    const method = couponId ? 'PUT' : 'POST';

    try {
      const response = await fetch(url, {
        method: method,
        headers: API_HEADERS,
        body: JSON.stringify(Object.fromEntries(formData))
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to save coupon');
      }

      return await response.json();
    } catch (error) {
      showAlert('error', error.message);
      console.error('Error saving coupon:', error);
      throw error;
    }
  }

  async function deleteCoupon(couponId) {
    try {
      const response = await fetch(`${API_BASE_URL}/delete-coupon/${couponId}`, {
        method: 'DELETE',
        headers: API_HEADERS
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to delete coupon');
      }
      
      return await response.json();
    } catch (error) {
      showAlert('error', error.message);
      console.error('Error deleting coupon:', error);
      throw error;
    }
  }

  async function handleEditClick(e) {
    const couponId = e.target.getAttribute('data-id');
    const btn = e.target;
    
    try {
      btn.disabled = true;
      btn.innerHTML = '‚è≥';
      
      const coupon = await fetchCoupon(couponId);
      await openEditModal(coupon);
    } catch (error) {
      console.error('Edit failed:', error);
    } finally {
      btn.disabled = false;
      btn.innerHTML = '‚úèÔ∏è';
    }
  }

  async function handleDeleteClick(e) {
    const couponId = e.target.getAttribute('data-id');
    
    if (!confirm('Are you sure you want to delete this coupon?')) return;
    
    const btn = e.target;
    try {
      btn.disabled = true;
      btn.innerHTML = '‚è≥';
      
      await deleteCoupon(couponId);
      showAlert('success', 'Coupon deleted successfully!');
      
      // Reload page to reflect changes
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } catch (error) {
      console.error('Delete failed:', error);
      btn.disabled = false;
      btn.innerHTML = 'üóë';
    }
  }

  async function handleFormSubmit(e) {
    e.preventDefault();
    if (isSubmitting) return;
    
    isSubmitting = true;
    const submitBtn = couponForm.querySelector('button[type="submit"]');
    
    try {
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Saving...';
      
      const formData = new FormData(couponForm);
      await saveCoupon(formData);
      
      showAlert('success', 'Coupon saved successfully!');
      closeModal();
      
      // Reload page to reflect changes
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } catch (error) {
      console.error('Save failed:', error);
    } finally {
      isSubmitting = false;
      submitBtn.disabled = false;
      submitBtn.textContent = 'Save Coupon';
    }
  }
});
</script>