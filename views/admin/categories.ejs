<%- include('../partials/admin/admin-header') %>
<link rel="stylesheet" href="/css/admin/category.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

<section class="category-page">
  <div class="section-header">
    <div class="header-content">
      <h2>Category Management</h2>
      <p>Organize and manage your product categories</p>
    </div>
    <button class="primary-btn add-btn" id="addCategoryBtn">
      <i class="fas fa-plus-circle"></i> Add New Category
    </button>
  </div>
  
  <div class="category-controls">
    <div class="search-filter">
      <div class="search-box">
        <input type="text" placeholder="Search categories..." class="search-input">
        <button class="search-btn"><i class="fas fa-search"></i></button>
      </div>
      <select class="filter-select">
        <option value="">All Status</option>
        <option value="active">Active</option>
        <option value="inactive">Inactive</option>
      </select>
    </div>
  </div>

  <div class="category-table-container">
    <div class="table-responsive">
      <table class="category-table">
        <thead>
          <tr>
            <th class="sortable">No <i class="fas fa-sort"></i></th>
            <th>Image</th>
            <th class="sortable">Category Name <i class="fas fa-sort"></i></th>
            <th>Description</th>
            <th class="sortable">Status <i class="fas fa-sort"></i></th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% categories.forEach((category, index) => { %>
          <tr>
            <td><%= index + 1 %></td>
            <td>
              <div class="category-image">
                <img src="<%= category.image || '/img/admin/category/default-category.jpg' %>" alt="<%= category.name %>" class="category-img" onerror="this.src='/img/admin/category/default-category.jpg'">
              </div>
            </td>
            <td>
              <div class="category-name">
                <strong><%= category.name %></strong>
                
              </div>
            </td>
            <td class="description-cell"><%= category.description || 'No description' %></td>
            <td>
              <label class="status-toggle">
                <input type="checkbox" <%= category.status === 'active' ? 'checked' : '' %> data-id="<%= category._id %>">
                <span class="status-slider round <%= category.status === 'active' ? 'active' : 'inactive' %>">
                  <%= category.status === 'active' ? 'Active' : 'Inactive' %>
                </span>
              </label>
            </td>
            <td>
              <div class="action-buttons">
                <button class="icon-btn edit-btn" title="Edit" data-id="<%= category._id %>">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="icon-btn delete-btn" title="Delete" data-id="<%= category._id %>">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </div>
            </td>
          </tr>
          <% }); %>
        </tbody>
      </table>
    </div>
    
    <div class="table-footer">
      <div class="table-info">
        Showing <%= startItem %> to <%= endItem %> of <%= totalCategories %> entries
      </div>
      <div class="pagination">
        <% if (currentPage > 1) { %>
          <a href="?page=<%= currentPage - 1 %>" class="page-btn"><i class="fas fa-chevron-left"></i></a>
        <% } else { %>
          <span class="page-btn disabled"><i class="fas fa-chevron-left"></i></span>
        <% } %>
        
        <% for (let i = 1; i <= totalPages; i++) { %>
          <% if (i === currentPage) { %>
            <span class="page-btn active"><%= i %></span>
          <% } else { %>
            <a href="?page=<%= i %>" class="page-btn"><%= i %></a>
          <% } %>
        <% } %>
        
        <% if (currentPage < totalPages) { %>
          <a href="?page=<%= currentPage + 1 %>" class="page-btn"><i class="fas fa-chevron-right"></i></a>
        <% } else { %>
          <span class="page-btn disabled"><i class="fas fa-chevron-right"></i></span>
        <% } %>
      </div>
    </div>
  </div>
</section>

<!-- Add/Edit Category Modal -->
<div class="modal-overlay" id="categoryModal">
  <div class="modal-content">
    <div class="modal-header">
      <h3 id="modalTitle">Add New Category</h3>
      <button class="close-modal" aria-label="Close modal">×</button>
    </div>
    <div class="modal-body">
      <form id="categoryForm" action="/admin/addCategory" method="POST" enctype="multipart/form-data">
        <div class="form-group">
          <label for="categoryName">Category Name</label>
          <input type="text" id="categoryName" name="name" placeholder="Enter category name" required aria-required="true">
        </div>
        <div class="form-group">
          <label for="categoryImage">Category Image</label>
          <div class="image-upload">
            <label for="categoryImage" class="upload-btn">
              <i class="fas fa-cloud-upload-alt"></i> Choose Image
            </label>
            <input type="file" id="categoryImageInput" name="categoryImage"accept="image/*">
            <div class="image-upload-preview" id="imagePreview">
  <div class="placeholder" id="imageUploadPlaceholder">
    <i class="fas fa-image"></i>
    <span>Upload Category Image</span>
  </div>
  <div class="image-container" id="cropperContainer"></div>
  <div class="crop-controls" id="cropControls">
    <button type="button" class="btn crop-btn" id="confirmCrop">Crop Image</button>
    <button type="button" class="btn cancel-btn" id="cancelCrop">Cancel</button>
  </div>
</div>

            <div class="crop-controls" style="display: none; margin-top: 10px;">
              <button type="button" class="crop-btn" id="cropButton">Crop Image</button>
              <button type="button" class="cancel-crop-btn" id="cancelCropButton">Cancel Crop</button>
            </div>
            <!-- <input type="hidden" name="croppedImage" id="croppedImage"> -->
          </div>
        </div>
        <div class="form-group">
          <label for="categoryDesc">Description</label>
          <textarea id="categoryDesc" name="description" placeholder="Enter category description"></textarea>
        </div>
        
        
       <div class="form-group">
    <label for="categoryStatus">Status</label>
    <div class="status-switch">
      <input type="checkbox" id="categoryStatus" name="status" checked>
      <label for="categoryStatus" class="switch-label">
        <span class="slider-round"></span>
      </label>
    </div>
  </div>
        
        
        
        <div class="form-actions">
          <button type="button" class="cancel-btn">Cancel</button>
          <button type="submit" class="submit-btn">Save Category</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal-overlay" id="deleteConfirmationModal">
  <div class="modal-content confirm-modal">
    <div class="modal-header">
      <h3>Confirm Deletion</h3>
      <button class="close-modal" aria-label="Close modal">×</button>
    </div>
    <div class="modal-body">
      <p>Are you sure you want to delete this category? This action cannot be undone.</p>
    </div>
    <div class="modal-footer">
      <form id="deleteForm" method="POST" action="/admin/categories/delete">
        <input type="hidden" name="categoryId" id="deleteCategoryId">
        <button type="button" class="cancel-btn">Cancel</button>
        <button type="submit" class="delete-confirm-btn">Delete</button>
      </form>
    </div>
  </div>
</div>

<script>
 document.addEventListener('DOMContentLoaded', function () {
  console.log('Script loaded at', new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })); // Debug

  // === DOM Elements ===
  const addCategoryBtn = document.getElementById('addCategoryBtn');
  const categoryModal = document.getElementById('categoryModal');
  const deleteConfirmationModal = document.getElementById('deleteConfirmationModal');
  const closeModalBtns = document.querySelectorAll('.close-modal, .cancel-btn');
  const categoryForm = document.getElementById('categoryForm');
  const deleteForm = document.getElementById('deleteForm');
  const imagePreview = document.getElementById('imagePreview');
  const cropCanvas = document.getElementById('cropCanvas');
  const cropControls = document.querySelector('.crop-controls');
  const cropButton = document.getElementById('cropButton');
  const cancelCropButton = document.getElementById('cancelCropButton');
  const categoryImageInput = document.getElementById('categoryImageInput');
  const searchInput = document.querySelector('.search-input');
  const filterSelect = document.querySelector('.filter-select');
  const statusToggles = document.querySelectorAll('.status-toggle input');
  const editButtons = document.querySelectorAll('.edit-btn');
  const deleteButtons = document.querySelectorAll('.delete-btn');
  const deleteCategoryId = document.getElementById('deleteCategoryId');
  const sortableHeaders = document.querySelectorAll('th.sortable');

  let cropper;

  // === Validate DOM Elements ===
  if (!addCategoryBtn || !categoryModal || !imagePreview || !cropButton || !cancelCropButton) {
    console.error('Missing required DOM elements:', {
      addCategoryBtn, categoryModal, imagePreview, cropButton, cancelCropButton
    });
    Swal.fire({
      title: 'Error',
      text: 'Page elements missing. Please contact support.',
      icon: 'error',
    });
    return;
  }

  // === Initialize ===
  initImageErrorHandling();
  initSortableHeaders();
  initKeyboardNavigation();

  // === Add Category Modal ===
  addCategoryBtn.addEventListener('click', () => {
    try {
      console.log('Add Category button clicked'); // Debug
      categoryForm.reset();
      imagePreview.innerHTML = '<div class="image-placeholder"><i class="fas fa-image"></i><span>Image Preview</span></div>';
      document.getElementById('categoryStatus').checked = true;
      const switchLabel = document.querySelector('.switch-label');
      if (switchLabel) switchLabel.textContent = 'Active';
      const slider = document.querySelector('.slider-round');
      if (slider) {
        slider.className = 'slider-round';
        slider.textContent = 'Active';
      }
      categoryForm.action = '/admin/addCategory';
      document.querySelector('.modal-header h3').textContent = 'Add New Category';
      requestAnimationFrame(() => {
        categoryModal.classList.add('active');
        categoryModal.style.display = 'flex';
        categoryModal.style.visibility = 'visible';
        categoryModal.style.opacity = '1';
      });
      document.getElementById('categoryName').focus();
      if (cropper) cropper.destroy();
      cropControls.style.display = 'none';
      window.croppedImageFile = null;
    } catch (error) {
      console.error('Error opening add category modal:', error);
      Swal.fire({
        title: 'Error',
        text: 'Failed to open modal. Please try again.',
        icon: 'error',
      });
    }
  });

  // === Image Preview and Cropping ===
  function validateImageFile(file) {
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
    const maxSize = 5 * 1024 * 1024;
    if (!allowedTypes.includes(file.type)) {
      throw new Error('Please select a valid image file (JPEG, PNG, WebP)');
    }
    if (file.size > maxSize) {
      throw new Error('Image size must be less than 5MB');
    }
    return true;
  }
// categoryImageInput.addEventListener('change', function () {
//   const file = this.files[0];
//   if (!file) return;

//   try {
//     validateImageFile(file);

//     const reader = new FileReader();
//     reader.onload = function (e) {
//       const img = new Image();
//       img.id = 'croppingImage';
//       img.src = event.target.result;
//       img.style.maxWidth = '100%';
//       img.style.maxHeight = '100%';
     

//       img.onload = function () {
//         console.log('Image loaded for preview');

//         const imageContainer = document.getElementById('imageContainer');
//         const placeholder = document.getElementById('imagePlaceholder');
//         // Destroy previous cropper if exists
//         if (cropper) {
//           cropper.destroy();
//           cropper = null;
//           console.log('Previous Cropper instance destroyed');
//         }

//         if (imageContainer) {
//           imageContainer.innerHTML = '';
//           img.className = 'preview-image'; // Set class before appending
//           imageContainer.appendChild(img);

//           // Delay cropper init to ensure DOM is ready
//           requestAnimationFrame(() => {
//             try {
//               cropper = new Cropper(img, {
//                 aspectRatio: 1,
//                 viewMode: 1,
//                 dragMode: 'move',
//                 guides: true,
//                 cropBoxResizable: true,
//                 toggleDragModeOnDblclick: false,
//                 ready: function () {
//                   console.log('Cropper initialized successfully');
//                   cropControls.style.display = 'block';
//                 },
//               });
//               // reader.readAsDataURL(file);
//             } catch (error) {
//               console.error('Cropper initialization failed:', error);
//               Swal.fire({
//                 title: 'Error',
//                 text: 'Failed to initialize image cropper.',
//                 icon: 'error',
//               });
//             }
//           });
//         }

//         if (placeholder) {
//           placeholder.style.display = 'none';
//         }
//       };

//       img.onerror = function () {
//         showImageError('Failed to load image.');
//       };

//       // img.src = e.target.result;
//     };

//     reader.onerror = function () {
//       showImageError('Failed to read image file.');
//     };

//     reader.readAsDataURL(file);
//   } catch (error) {
//     showImageError(error.message);
//   }
// });
// Simplified and corrected image upload handler
categoryImageInput.addEventListener('change', function (e) {
  const file = e.target.files[0];
  if (!file || !file.type.startsWith('image/')) {
    return Swal.fire('Error', 'Please upload a valid image file.', 'error');
  }

  const reader = new FileReader();
  const img = document.createElement('img');
  img.id = 'croppingImage';
  img.className = 'preview-image';
  img.style.maxWidth = '100%';
  img.style.height = 'auto';

  reader.onload = function (event) {
    img.onload = function () {
// Verify the element is actually in the DOM
  if (!document.body.contains(img)) {
    console.error('Image element not in DOM!');
    return;
  }
  

      const imageContainer = document.getElementById('imageContainer');
      const placeholder = document.getElementById('imagePlaceholder');
      
      // Clear previous content
      if (imageContainer) {
        imageContainer.innerHTML = '';
        imageContainer.appendChild(img);
      }

      // Destroy previous cropper if exists
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }

      // Initialize new cropper
      try {
        cropper = new Cropper(img, {
          aspectRatio: 1,
          viewMode: 1,
          autoCropArea: 0.8,
          responsive: true,
          guides: true
        });
        cropControls.style.display = 'block';
      } catch (error) {
        console.error('Cropper init failed:', error);
        Swal.fire('Error', 'Failed to initialize image editor.', 'error');
      }

      if (placeholder) placeholder.style.display = 'none';
    };

    img.src = e.target.result;
  };

  reader.readAsDataURL(file);
});

function showImageError(message) {
  const placeholder = document.getElementById('imagePlaceholder');
  const imageContainer = document.getElementById('imageContainer');

  if (placeholder) placeholder.style.display = 'block';
  if (imageContainer) imageContainer.innerHTML = '';
  cropControls.style.display = 'none';
  if (cropper) cropper.destroy();
  cropper = null;

  Swal.fire({
    title: 'Error',
    text: message,
    icon: 'error',
  });
}
  cancelCropButton.addEventListener('click', () => {
    console.log('Cancel crop clicked at', new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })); // Debug
    if (cropper) {
      cropper.destroy();
      cropper = null;
    }
    categoryImageInput.value = '';
    imagePreview.innerHTML = '<div class="image-placeholder"><i class="fas fa-image"></i><span>Image Preview</span></div>';
    cropControls.style.display = 'none';
    window.croppedImageFile = null;
    console.log('Crop cancelled'); // Debug
  });

  // === Form Submission ===
  // categoryForm.addEventListener('submit', async function (e) {
  //   e.preventDefault();

  //   const categoryName = document.getElementById('categoryName').value.trim();
  //   if (!categoryName) {
  //     Swal.fire({
  //       title: 'Error',
  //       text: 'Category name is required',
  //       icon: 'error',
  //     });
  //     return;
  //   }

  //   const submitButton = this.querySelector('.submit-btn');
  //   const originalText = submitButton.innerHTML;

  //   try {
  //     setLoading(submitButton, true);
  //     const formData = new FormData();

  //     formData.append('name', categoryName);
  //     formData.append('description', document.getElementById('categoryDesc').value);
  //     const statusCheckbox = document.getElementById('categoryStatus');
  //     formData.append('status', statusCheckbox.checked ? 'active' : 'inactive');

  //     if (window.croppedImageFile) {
  //       console.log('Appending cropped image to FormData'); // Debug
  //       formData.append('categoryImage', window.croppedImageFile);
  //     } else if (categoryImageInput.files[0]) {
  //       console.log('Appending original image to FormData'); // Debug
  //       formData.append('categoryImage', categoryImageInput.files[0]);
  //     } else {
  //       console.log('No image provided'); // Debug
  //     }

  //     const response = await fetch(this.action, {
  //       method: 'POST',
  //       body: formData,
  //     });

  //     if (!response.ok) {
  //       throw new Error(`HTTP error! status: ${response.status}`);
  //     }

  //     const contentType = response.headers.get('content-type');
  //     if (!contentType || !contentType.includes('application/json')) {
  //       throw new Error('Expected JSON response from server');
  //     }

  //     const data = await response.json();

  //     Swal.fire({
  //       title: data.alert.title,
  //       text: data.alert.text,
  //       icon: data.alert.icon,
  //     });

  //     if (data.success) {
  //       setTimeout(() => {
  //         categoryModal.classList.remove('active');
  //         categoryModal.style.display = 'none';
  //         window.location.reload();
  //       }, 1500);
  //     }
  //   } catch (error) {
  //     console.error('Form submission error:', error);
  //     Swal.fire({
  //       title: 'Error',
  //       text: error.message || 'Failed to save category. Please try again.',
  //       icon: 'error',
  //     });
  //   } finally {
  //     setLoading(submitButton, false, originalText);
  //   }
  // });
// Add this before form submission
cropButton.addEventListener('click', function() {
  if (!cropper) {
    return Swal.fire('Error', 'No image to crop', 'error');
  }

  // Get cropped canvas
  const canvas = cropper.getCroppedCanvas({
    width: 400,
    height: 400,
    minWidth: 256,
    minHeight: 256,
    maxWidth: 800,
    maxHeight: 800,
    fillColor: '#fff',
    imageSmoothingEnabled: true,
    imageSmoothingQuality: 'high',
  });

  if (!canvas) {
    return Swal.fire('Error', 'Could not crop image', 'error');
  }

  // Convert canvas to blob
  canvas.toBlob((blob) => {
    if (!blob) {
      return Swal.fire('Error', 'Failed to process image', 'error');
    }
    
    // Create file from blob
    window.croppedImageFile = new File([blob], 'cropped-image.jpg', {
      type: 'image/jpeg',
      lastModified: Date.now()
    });
    
    // Update preview
    const imageContainer = document.getElementById('imageContainer');
    if (imageContainer) {
      imageContainer.innerHTML = '';
      const croppedImg = document.createElement('img');
      croppedImg.src = URL.createObjectURL(blob);
      croppedImg.className = 'preview-image';
      imageContainer.appendChild(croppedImg);
    }
    
    Swal.fire('Success', 'Image cropped successfully', 'success');
  }, 'image/jpeg', 0.9);
});

//form submission
categoryForm.addEventListener('submit', async function (e) {
  e.preventDefault();

  const categoryName = document.getElementById('categoryName').value.trim();
  if (!categoryName) {
    Swal.fire({
      title: 'Error',
      text: 'Category name is required',
      icon: 'error',
    });
    return;
  }

  const submitButton = this.querySelector('.submit-btn');
  const originalText = submitButton.innerHTML;

  try {
    setLoading(submitButton, true);
    const formData = new FormData();

    formData.append('name', categoryName);
    formData.append('description', document.getElementById('categoryDesc').value);
    const statusCheckbox = document.getElementById('categoryStatus');
    formData.append('status', statusCheckbox.checked ? 'active' : 'inactive');

    // Handle both cropped and original images
    if (window.croppedImageFile) {
      formData.append('categoryImage', window.croppedImageFile);
    } else if (categoryImageInput.files[0]) {
      formData.append('categoryImage', categoryImageInput.files[0]);
    }

    const response = await fetch(this.action, {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

    const data = await response.json();
    if (!data) throw new Error('No response data');

    Swal.fire({
      title: data.success ? 'Success' : 'Error',
      text: data.message || (data.success ? 'Category saved successfully' : 'Failed to save category'),
      icon: data.success ? 'success' : 'error',
    });

    if (data.success) {
      setTimeout(() => {
        categoryModal.classList.remove('active');
        window.location.reload();
      }, 1500);
    }
  } catch (error) {
    console.error('Form submission error:', error);
    Swal.fire({
      title: 'Error',
      text: error.message || 'Failed to save category. Please try again.',
      icon: 'error',
    });
  } finally {
    setLoading(submitButton, false, originalText);
  }
});
  // === Modal Controls ===
  closeModalBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      categoryModal.classList.remove('active');
      categoryModal.style.display = 'none';
      deleteConfirmationModal.classList.remove('active');
      deleteConfirmationModal.style.display = 'none';
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
      cropControls.style.display = 'none';
      window.croppedImageFile = null;
    });
  });

  window.addEventListener('click', e => {
    if (e.target === categoryModal) {
      categoryModal.classList.remove('active');
      categoryModal.style.display = 'none';
    }
    if (e.target === deleteConfirmationModal) {
      deleteConfirmationModal.classList.remove('active');
      deleteConfirmationModal.style.display = 'none';
    }
    if (cropper) {
      cropper.destroy();
      cropper = null;
    }
    cropControls.style.display = 'none';
    window.croppedImageFile = null;
  });

  // === Status Toggle ===
  // statusToggles.forEach(toggle => {
  //   toggle.addEventListener('change', async function () {
  //     const categoryId = this.getAttribute('data-id');
  //     const newStatus = this.checked ? 'active' : 'inactive';
  //     const statusSpan = this.nextElementSibling;
  //     const originalChecked = this.checked;

  //     try {
  //       document.body.classList.add('freeze-layout');
  //       statusSpan.style.transition = 'none';
  //       const response = await fetch(`/admin/categories/status/${categoryId}`, {
  //         method: 'POST',
  //         headers: { 'Content-Type': 'application/json' },
  //         body: JSON.stringify({ status: newStatus }),
  //       });

  //       const contentType = response.headers.get('content-type');
  //       if (!contentType || !contentType.includes('application/json')) {
  //         throw new Error('Expected JSON response from server');
  //       }

  //       const data = await response.json();

  //       if (!data.success) {
  //         throw new Error(data.alert.text || 'Failed to update status');
  //       }

  //       requestAnimationFrame(() => {
  //         statusSpan.className = `status-slider round ${newStatus}`;
  //         statusSpan.textContent = newStatus === 'active' ? 'Active' : 'Inactive';
  //         statusSpan.style.backgroundColor = newStatus === 'active' ? '#2ecc71' : '#e74c3c';

  //         setTimeout(() => {
  //           statusSpan.style.transition = '';
  //           document.body.classList.remove('freeze-layout');
  //         }, 50);
  //       });

  //       Swal.fire({
  //         title: data.alert.title,
  //         text: data.alert.text,
  //         icon: data.alert.icon,
  //       });
  //     } catch (error) {
  //       console.error('Error:', error);
  //       this.checked = !originalChecked;
  //       statusSpan.className = `status-slider round ${originalChecked ? 'active' : 'inactive'}`;
  //       statusSpan.textContent = originalChecked ? 'Active' : 'Inactive';
  //       statusSpan.style.backgroundColor = originalChecked ? '#2ecc71' : '#e74c3c';
  //       document.body.classList.remove('freeze-layout');
  //       Swal.fire({
  //         title: 'Error',
  //         text: error.message || 'Failed to update status',
  //         icon: 'error',
  //       });
  //     }
  //   });
  // });
statusToggles.forEach(toggle => {
  toggle.addEventListener('change', async function() {
    const categoryId = this.dataset.id;
    const newStatus = this.checked ? 'active' : 'inactive';
    const statusSpan = this.nextElementSibling;
    const originalStatus = !this.checked;

    try {
      // Immediate UI feedback
      statusSpan.textContent = newStatus === 'active' ? 'Active' : 'Inactive';
      statusSpan.style.backgroundColor = newStatus === 'active' ? '#2ecc71' : '#e74c3c';

      const response = await fetch(`/admin/categories/status/${categoryId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status: newStatus })
      });

      if (!response.ok) throw new Error('Network response was not ok');

      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.message || 'Status update failed');
      }

    } catch (error) {
      // Revert on error
      console.error('Status update error:', error);
      this.checked = originalStatus;
      statusSpan.textContent = originalStatus ? 'Active' : 'Inactive';
      statusSpan.style.backgroundColor = originalStatus ? '#2ecc71' : '#e74c3c';
      
      Swal.fire({
        title: 'Error',
        text: error.message || 'Failed to update status',
        icon: 'error'
      });
    }
  });
});
  // === Edit Category ===
  editButtons.forEach(button => {
    button.addEventListener('click', async function () {
      const categoryId = this.getAttribute('data-id');
if (!categoryId) {
      Swal.fire('Error', 'Invalid category ID', 'error');
      return;
    }

      try {
        const response = await fetch(`/admin/categories/${categoryId}`);
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
          throw new Error('Expected JSON response from server');
        }
if (!response.ok) throw new Error('Failed to fetch category');
        const data = await response.json();
        if (!data._id) {
          throw new Error('Category data not found');
        }

        document.getElementById('categoryName').value = data.name || '';
        document.getElementById('categoryDesc').value = data.description || '';
        document.getElementById('categoryStatus').checked = data.status === 'active';

        const switchLabel = document.querySelector('.switch-label');
        if (switchLabel) {
          switchLabel.textContent = data.status === 'active' ? 'Active' : 'Inactive';
        }

        const slider = document.querySelector('.slider-round');
        if (slider) {
          slider.className = 'slider-round';
          slider.textContent = data.status === 'active' ? 'Active' : 'Inactive';
        }

        if (data.image) {
          console.log('Loading existing image:', data.image); // Debug
          imagePreview.innerHTML = `<img src="${data.image}" alt="Preview" class="preview-image" onerror="this.src='/images/default-category.jpg'">`;
          categoryImageInput.value = '';
          window.croppedImageFile = null;
          cropControls.style.display = 'none';
          if (cropper) {
            cropper.destroy();
            cropper = null;
          }
        } else {
          console.log('No existing image, resetting preview'); // Debug
          imagePreview.innerHTML = '<div class="image-placeholder"><i class="fas fa-image"></i><span>Image Preview</span></div>';
          categoryImageInput.value = '';
          window.croppedImageFile = null;
          cropControls.style.display = 'none';
          if (cropper) {
            cropper.destroy();
            cropper = null;
          }
        }

        categoryForm.action = `/admin/categories/${categoryId}/update`;
        document.querySelector('.modal-header h3').textContent = 'Edit Category';

        requestAnimationFrame(() => {
          categoryModal.classList.add('active');
          categoryModal.style.display = 'flex';
          categoryModal.style.visibility = 'visible';
          categoryModal.style.opacity = '1';
          console.log('Edit modal opened'); // Debug
        });

        document.getElementById('categoryName').focus();
      } catch (error) {
        console.error('Error loading category data:', error);
        Swal.fire({
          title: 'Error',
          text: error.message || 'Failed to load category data.',
          icon: 'error',
        });
      }
    });
  });

  // === Delete Category ===
  deleteButtons.forEach(button => {
    button.addEventListener('click', function () {
      const categoryId = this.getAttribute('data-id');
      if (!categoryId) {
        Swal.fire({
          title: 'Error',
          text: 'Invalid category ID',
          icon: 'error',
        });
        return;
      }
      deleteCategoryId.value = categoryId;
      requestAnimationFrame(() => {
        deleteConfirmationModal.classList.add('active');
        deleteConfirmationModal.style.display = 'flex';
        deleteConfirmationModal.style.visibility = 'visible';
        deleteConfirmationModal.style.opacity = '1';
      });
    });
  });

  deleteForm.addEventListener('submit', async function (e) {
    e.preventDefault();
    const submitButton = this.querySelector('.delete-confirm-btn');
    const originalText = submitButton.innerHTML;

    try {
      setLoading(submitButton, true);
      const categoryId = deleteCategoryId.value;

      const response = await fetch('/admin/categories/delete', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ categoryId }),
      });

      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        throw new Error('Expected JSON response from server');
      }

      const data = await response.json();

      Swal.fire({
        title: data.alert.title,
        text: data.alert.text,
        icon: data.alert.icon,
      });

      if (data.success) {
        const row = document.querySelector(`.delete-btn[data-id="${categoryId}"]`).closest('tr');
        row.remove();
        updateRowNumbers();
        deleteConfirmationModal.classList.remove('active');
        deleteConfirmationModal.style.display = 'none';
      }
    } catch (error) {
      console.error('Error:', error);
      Swal.fire({
        title: 'Error',
        text: error.message || 'Failed to delete category',
        icon: 'error',
      });
    } finally {
      setLoading(submitButton, false, originalText);
    }
  });

  // === Search & Filter ===
  searchInput.addEventListener('input', debounce(function () {
    filterCategories(this.value.trim().toLowerCase(), filterSelect.value);
  }, 300));

  filterSelect.addEventListener('change', function () {
    filterCategories(searchInput.value.trim().toLowerCase(), this.value);
  });

  // === Helper Functions ===
  function initImageErrorHandling() {
    document.querySelectorAll('.category-img').forEach(img => {
      img.onerror = function () {
        console.log('Image load failed, using default:', this.src); // Debug
        this.src = '/images/default-category.jpg';
      };
    });
  }

  function initSortableHeaders() {
    sortableHeaders.forEach(header => {
      header.addEventListener('click', function () {
        const columnIndex = Array.from(this.parentNode.children).indexOf(this);
        const isAscending = !this.classList.contains('asc');

        sortTable(columnIndex, isAscending);

        sortableHeaders.forEach(h => {
          h.classList.remove('asc', 'desc');
          h.querySelector('i').className = 'fas fa-sort';
        });

        this.classList.toggle('asc', isAscending);
        this.classList.toggle('desc', !isAscending);

        const icon = this.querySelector('i');
        icon.className = isAscending ? 'fas fa-sort-up' : 'fas fa-sort-down';
      });
    });
  }

  function initKeyboardNavigation() {
    document.querySelectorAll('.icon-btn').forEach(btn => {
      btn.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          btn.click();
        }
      });
    });
  }

  function sortTable(columnIndex, isAscending) {
    const table = document.querySelector('table');
    const tbody = table.querySelector('tbody');
    const rows = Array.from(tbody.querySelectorAll('tr'));

    rows.sort((a, b) => {
      const aValue = a.children[columnIndex].textContent.trim();
      const bValue = b.children[columnIndex].textContent.trim();

      if (columnIndex === 0) {
        return isAscending ? aValue - bValue : bValue - aValue;
      }

      if (columnIndex === 4) {
        const aStatus = a.querySelector('.status-toggle input').checked;
        const bStatus = b.querySelector('.status-toggle input').checked;
        return isAscending ? aStatus - bStatus : bStatus - aStatus;
      }

      return isAscending
        ? aValue.localeCompare(bValue)
        : bValue.localeCompare(aValue);
    });

    rows.forEach(row => tbody.appendChild(row));
    updateRowNumbers();
  }

  function filterCategories(searchTerm, statusFilter) {
    const rows = document.querySelectorAll('tbody tr');
    let visibleCount = 0;

    rows.forEach(row => {
      const name = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
      const status = row.querySelector('.status-toggle input').checked ? 'active' : 'inactive';
      const nameMatch = name.includes(searchTerm);
      const statusMatch = statusFilter === '' || status === statusFilter;

      row.style.display = nameMatch && statusMatch ? '' : 'none';
      if (nameMatch && statusMatch) visibleCount++;
    });

    document.querySelector('.table-info').textContent = `Showing ${visibleCount} of ${rows.length} entries`;
  }

  function setLoading(element, isLoading, originalText = null) {
    if (isLoading) {
      element.dataset.originalText = originalText || element.textContent;
      element.disabled = true;
      element.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ' + (originalText || element.textContent);
    } else {
      element.disabled = false;
      element.innerHTML = originalText || element.dataset.originalText || '';
    }
  }

  function updateRowNumbers() {
    document.querySelectorAll('tbody tr').forEach((row, index) => {
      row.querySelector('td:first-child').textContent = index + 1;
    });
  }

  function debounce(func, wait) {
    let timeout;
    return function (...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  }
});
</script>
<%- include('../partials/admin/admin-footer') %>