<%- include('../partials/admin/admin-header') %>
<link rel="stylesheet" href="/css/admin/category.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

<section class="category-page">
  <div class="section-header">
    <div class="header-content">
      <h2>Category Management</h2>
      <p>Organize and manage your product categories</p>
    </div>
    <button class="primary-btn add-btn" id="addCategoryBtn">
      <i class="fas fa-plus-circle"></i> Add New Category
    </button>
  </div>
  
  <div class="category-controls">
    <div class="search-filter">
      <div class="search-box">
        <input type="text" placeholder="Search categories..." class="search-input" id="searchInput">
        <button class="search-btn"><i class="fas fa-search"></i></button>
      </div>
      <select class="filter-select" id="statusFilter">
        <option value="">All Status</option>
        <option value="active">Active</option>
        <option value="inactive">Inactive</option>
      </select>
    </div>
  </div>

  <div class="category-table-container">
    <div class="table-responsive">
      <table class="category-table">
        <thead>
          <tr>
            <th class="sortable">No <i class="fas fa-sort"></i></th>
            <th>Image</th>
            <th class="sortable">Category Name <i class="fas fa-sort"></i></th>
            <th>Description</th>
            <th class="sortable">Status <i class="fas fa-sort"></i></th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% categories.forEach((category, index) => { %>
          <tr>
            <td><%= index + 1 %></td>
            <td>
              <div class="category-image">
                <img src="<%= category.image || '/img/admin/category/default-category.jpg' %>" 
                     alt="<%= category.name %>" 
                     class="category-img" 
                     onerror="this.src='/img/admin/category/default-category.jpg'">
              </div>
            </td>
            <td>
              <div class="category-name">
                <strong><%= category.name %></strong>
              </div>
            </td>
            <td class="description-cell"><%= category.description || 'No description' %></td>
            <td>
              <label class="status-toggle">
                <input type="checkbox" <%= category.status === 'active' ? 'checked' : '' %> 
                       data-id="<%= category._id %>"
                       class="status-checkbox">
                <span class="status-slider round <%= category.status === 'active' ? 'active' : 'inactive' %>">
                  <%= category.status === 'active' ? 'Active' : 'Inactive' %>
                </span>
              </label>
            </td>
            <td>
              <div class="action-buttons">
                <button class="icon-btn edit-btn" title="Edit" data-id="<%= category._id %>">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="icon-btn delete-btn" title="Delete" data-id="<%= category._id %>">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </div>
            </td>
          </tr>
          <% }); %>
        </tbody>
      </table>
    </div>
    
    <div class="table-footer">
      <div class="table-info">
        Showing <%= startItem %> to <%= endItem %> of <%= totalCategories %> entries
      </div>
      <div class="pagination">
        <% if (currentPage > 1) { %>
          <a href="?page=<%= currentPage - 1 %>" class="page-btn"><i class="fas fa-chevron-left"></i></a>
        <% } else { %>
          <span class="page-btn disabled"><i class="fas fa-chevron-left"></i></span>
        <% } %>
        
        <% for (let i = 1; i <= totalPages; i++) { %>
          <% if (i === currentPage) { %>
            <span class="page-btn active"><%= i %></span>
          <% } else { %>
            <a href="?page=<%= i %>" class="page-btn"><%= i %></a>
          <% } %>
        <% } %>
        
        <% if (currentPage < totalPages) { %>
          <a href="?page=<%= currentPage + 1 %>" class="page-btn"><i class="fas fa-chevron-right"></i></a>
        <% } else { %>
          <span class="page-btn disabled"><i class="fas fa-chevron-right"></i></span>
        <% } %>
      </div>
    </div>
  </div>
</section>

<!-- Add/Edit Category Modal -->
<div class="modal-overlay" id="categoryModal">
  <div class="modal-content">
    <div class="modal-header">
      <h3 id="modalTitle">Add New Category</h3>
      <button class="close-modal" aria-label="Close modal">&times;</button>
    </div>
    <div class="modal-body">
      <form id="categoryForm"action="/admin/addCategory" enctype="multipart/form-data">
        <input type="hidden" id="categoryId" name="categoryId">
        <div class="form-group">
          <label for="categoryName">Category Name *</label>
          <input type="text" id="categoryName" name="name" placeholder="Enter category name" required>
        </div>
        <div class="form-group">
          <label for="categoryImage">Category Image</label>
          <div class="image-upload-container">
            <input type="file" id="categoryImageInput" accept="image/*" style="display: none;">
            <label for="categoryImageInput" class="upload-btn">
              <i class="fas fa-cloud-upload-alt"></i> Choose Image
            </label>
            <div id="imagePreview" class="image-preview">
              <div class="image-placeholder">
                <i class="fas fa-image"></i>
                <span>Image Preview</span>
              </div>
            </div>
            <div id="cropperContainer" class="cropper-container" style="display: none;"></div>
            <div id="cropControls" class="crop-controls" style="display: none;">
              <button type="button" id="cropButton" class="btn crop-btn">Crop</button>
              <button type="button" id="cancelCropButton" class="btn cancel-btn">Cancel</button>
            </div>
          </div>
          <input type="hidden" id="croppedImageData" name="croppedImage">
        </div>
        <div class="form-group">
          <label for="categoryDesc">Description</label>
          <textarea id="categoryDesc" name="description" placeholder="Enter category description"></textarea>
        </div>
        <div class="form-group">
          <label for="categoryStatus">Status</label>
          <div class="status-switch">
            <input type="checkbox" id="categoryStatus" name="status" checked>
            <label for="categoryStatus" class="switch-label">
              <span class="slider-round"></span>
              <!-- <span class="status-text">Active</span> -->
            </label>
          </div>
        </div>
        <div class="form-actions">
          <button type="button" class="btn cancel-btn" id="cancelModalBtn">Cancel</button>
          <button type="submit" class="btn submit-btn" id="submitCategoryBtn">Save Category</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal-overlay" id="deleteConfirmationModal">
  <div class="modal-content confirm-modal">
    <div class="modal-header">
      <h3>Confirm Deletion</h3>
      <button class="close-modal" aria-label="Close modal">&times;</button>
    </div>
    <div class="modal-body">
      <p>Are you sure you want to delete this category? This action cannot be undone.</p>
    </div>
    <div class="modal-footer">
      <input type="hidden" id="deleteCategoryId">
      <button type="button" class="btn cancel-btn" id="cancelDeleteBtn">Cancel</button>
      <button type="button" class="btn delete-confirm-btn" id="confirmDeleteBtn">Delete</button>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // DOM Elements
  const addCategoryBtn = document.getElementById('addCategoryBtn');
  const categoryModal = document.getElementById('categoryModal');
  const deleteConfirmationModal = document.getElementById('deleteConfirmationModal');
  const categoryForm = document.getElementById('categoryForm');
  const categoryImageInput = document.getElementById('categoryImageInput');
  const imagePreview = document.getElementById('imagePreview');
  const cropperContainer = document.getElementById('cropperContainer');
  const cropControls = document.getElementById('cropControls');
  const cropButton = document.getElementById('cropButton');
  const cancelCropButton = document.getElementById('cancelCropButton');
  const croppedImageData = document.getElementById('croppedImageData');
  const searchInput = document.getElementById('searchInput');
  const statusFilter = document.getElementById('statusFilter');
  const cancelModalBtn = document.getElementById('cancelModalBtn');
  const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
  const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
  
  let cropper;
  let currentCategoryId = null;
  let deleteCategoryId = null;

  // Initialize modals
  function openModal() {
    categoryModal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
  }

  function closeModal() {
    categoryModal.style.display = 'none';
    document.body.style.overflow = 'auto';
    resetForm();
  }

  function openDeleteModal() {
    deleteConfirmationModal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
  }

  function closeDeleteModal() {
    deleteConfirmationModal.style.display = 'none';
    document.body.style.overflow = 'auto';
    deleteCategoryId = null;
  }

  // Reset form
  function resetForm() {
    categoryForm.reset();
    currentCategoryId = null;
    document.getElementById('modalTitle').textContent = 'Add New Category';
    categoryForm.action = '/admin/categories/add';
    imagePreview.innerHTML = `
      <div class="image-placeholder">
        <i class="fas fa-image"></i>
        <span>Image Preview</span>
      </div>`;
    cropperContainer.style.display = 'none';
    cropControls.style.display = 'none';
    if (cropper) {
      cropper.destroy();
      cropper = null;
    }
  }

  // Add Category Button
  addCategoryBtn.addEventListener('click', openModal);

  // Edit Category Buttons
  document.querySelectorAll('.edit-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const categoryId = this.dataset.id;
      currentCategoryId = categoryId;
      
      // Fetch category data
      fetch(`/admin/categories/${categoryId}`)
        .then(response => response.json())
        .then(data => {
          if (data.error) throw new Error(data.error);
          
          // Populate form
          document.getElementById('categoryId').value = data._id;
          document.getElementById('categoryName').value = data.name;
          document.getElementById('categoryDesc').value = data.description || '';
          document.getElementById('categoryStatus').checked = data.status === 'active';
          
          // Update status text
          updateStatusText(data.status === 'active');
          
          // Set image preview
          if (data.image) {
            imagePreview.innerHTML = `
              <img src="${data.image}" alt="Category Image" class="preview-image">
            `;
          }
          
          // Update modal title and form action
          document.getElementById('modalTitle').textContent = 'Edit Category';
          categoryForm.action = `/admin/categories/${categoryId}/update`;
          
          // Open modal
          openModal();
        })
        .catch(error => {
          console.error('Error fetching category:', error);
          Swal.fire('Error', 'Failed to load category data', 'error');
        });
    });
  });

  // Delete Category Buttons
  document.querySelectorAll('.delete-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      deleteCategoryId = this.dataset.id;
      openDeleteModal();
    });
  });

  // Confirm Delete
  confirmDeleteBtn.addEventListener('click', function() {
    if (!deleteCategoryId) return;
    
    fetch(`/admin/categories/delete`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ categoryId: deleteCategoryId })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        Swal.fire('Success', data.message, 'success');
        // Remove the deleted row
        document.querySelector(`.delete-btn[data-id="${deleteCategoryId}"]`).closest('tr').remove();
        closeDeleteModal();
        updateRowNumbers();
      } else {
        Swal.fire('Error', data.message || 'Failed to delete category', 'error');
      }
    })
    .catch(error => {
      console.error('Error deleting category:', error);
      Swal.fire('Error', 'Failed to delete category', 'error');
    });
  });

  // Status Toggle
  document.querySelectorAll('.status-checkbox').forEach(checkbox => {
    checkbox.addEventListener('change', function() {
      const categoryId = this.dataset.id;
      const newStatus = this.checked ? 'active' : 'inactive';
      const statusSpan = this.nextElementSibling;
      
      // Optimistic UI update
      statusSpan.textContent = newStatus === 'active' ? 'Active' : 'Inactive';
      statusSpan.className = `status-slider round ${newStatus}`;
      
      // Send request to server
      fetch(`/admin/categories/status/${categoryId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status: newStatus })
      })
      .then(response => response.json())
      .then(data => {
        if (!data.success) {
          // Revert if failed
          this.checked = !this.checked;
          statusSpan.textContent = this.checked ? 'Active' : 'Inactive';
          statusSpan.className = `status-slider round ${this.checked ? 'active' : 'inactive'}`;
          Swal.fire('Error', data.message || 'Failed to update status', 'error');
        }
      })
      .catch(error => {
        console.error('Error updating status:', error);
        // Revert on error
        this.checked = !this.checked;
        statusSpan.textContent = this.checked ? 'Active' : 'Inactive';
        statusSpan.className = `status-slider round ${this.checked ? 'active' : 'inactive'}`;
        Swal.fire('Error', 'Failed to update status', 'error');
      });
    });
  });

  // Image Upload and Cropping
  categoryImageInput.addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (!file) return;
    
    // Validate image
    if (!file.type.match('image.*')) {
      Swal.fire('Error', 'Please select an image file', 'error');
      return;
    }
    
    // Create preview
    const reader = new FileReader();
    reader.onload = function(event) {
      // Clear previous cropper if exists
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
      
      // Create image for cropper
      const img = document.createElement('img');
      img.id = 'croppingImage';
      img.src = event.target.result;
      
      // Clear and setup containers
      cropperContainer.innerHTML = '';
      cropperContainer.appendChild(img);
      cropperContainer.style.display = 'block';
      imagePreview.style.display = 'none';
      cropControls.style.display = 'flex';
      
      // Initialize cropper
      cropper = new Cropper(img, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 0.8,
        responsive: true
      });
    };
    reader.readAsDataURL(file);
  });

  // Crop Button
  cropButton.addEventListener('click', function() {
    if (!cropper) return;
    
    // Get cropped canvas
    const canvas = cropper.getCroppedCanvas({
      width: 400,
      height: 400,
      minWidth: 256,
      minHeight: 256,
      maxWidth: 800,
      maxHeight: 800,
      fillColor: '#fff'
    });
    
    if (!canvas) {
      Swal.fire('Error', 'Could not crop image', 'error');
      return;
    }
    
    // Convert to blob and create preview
    canvas.toBlob(function(blob) {
      const url = URL.createObjectURL(blob);
      
      // Update preview
      imagePreview.innerHTML = `
        <img src="${url}" alt="Cropped Image" class="preview-image">
      `;
      imagePreview.style.display = 'block';
      cropperContainer.style.display = 'none';
      cropControls.style.display = 'none';
      
      // Store cropped image data
      canvas.toDataURL('image/jpeg', 0.9, function(dataUrl) {
        croppedImageData.value = dataUrl;
      });
      
      // Clean up
      cropper.destroy();
      cropper = null;
    }, 'image/jpeg', 0.9);
  });

  // Cancel Crop
  cancelCropButton.addEventListener('click', function() {
    if (cropper) {
      cropper.destroy();
      cropper = null;
    }
    categoryImageInput.value = '';
    cropperContainer.style.display = 'none';
    cropControls.style.display = 'none';
    imagePreview.style.display = 'block';
    imagePreview.innerHTML = `
      <div class="image-placeholder">
        <i class="fas fa-image"></i>
        <span>Image Preview</span>
      </div>`;
  });

  // Form Submission
  categoryForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const submitBtn = document.getElementById('submitCategoryBtn');
    const originalBtnText = submitBtn.innerHTML;
    
    // Show loading state
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
    
    // Send request
    fetch(this.action, {
      method: 'POST',
      body: formData
    })
    .then(response => {
    const contentType = response.headers.get('content-type');
    if (contentType && contentType.includes('application/json')) {
      return response.json();
    } else {
      return response.text().then(text => {
        console.error('Server returned non-JSON response:', text);
        throw new Error('Unexpected response format from server');
      });
    }
  })
    .then(data => {
      if (data.success) {
        Swal.fire('Success', data.message, 'success').then(() => {
          window.location.reload();
        });
      } else {
        Swal.fire('Error', data.message || 'Failed to save category', 'error');
      }
    })
    .catch(error => {
      console.error('Error saving category:', error);
      Swal.fire('Error', 'Failed to save category', 'error');
    })
    .finally(() => {
      submitBtn.disabled = false;
      submitBtn.innerHTML = originalBtnText;
    });
  });

  // Search and Filter
  searchInput.addEventListener('input', debounce(function() {
    filterCategories();
  }, 300));

  statusFilter.addEventListener('change', function() {
    filterCategories();
  });

  function filterCategories() {
    const searchTerm = searchInput.value.toLowerCase();
    const statusValue = statusFilter.value;
    
    document.querySelectorAll('tbody tr').forEach(row => {
      const name = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
      const status = row.querySelector('.status-checkbox').checked ? 'active' : 'inactive';
      
      const nameMatch = name.includes(searchTerm);
      const statusMatch = statusValue === '' || status === statusValue;
      
      row.style.display = nameMatch && statusMatch ? '' : 'none';
    });
    
    updateVisibleCount();
  }

  // Helper Functions
  function updateStatusText(isActive) {
    const statusText = document.querySelector('.status-text');
    if (statusText) {
      statusText.textContent = isActive ? 'Active' : 'Inactive';
    }
  }

  function updateRowNumbers() {
    document.querySelectorAll('tbody tr').forEach((row, index) => {
      if (row.style.display !== 'none') {
        row.querySelector('td:first-child').textContent = index + 1;
      }
    });
  }

  function updateVisibleCount() {
    const visibleRows = document.querySelectorAll('tbody tr:not([style*="display: none"])');
    const totalRows = document.querySelectorAll('tbody tr').length;
    document.querySelector('.table-info').textContent = 
      `Showing ${visibleRows.length} of ${totalRows} entries`;
  }

  function debounce(func, wait) {
    let timeout;
    return function() {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, arguments), wait);
    };
  }

  // Close modals when clicking outside
  window.addEventListener('click', function(e) {
    if (e.target === categoryModal) closeModal();
    if (e.target === deleteConfirmationModal) closeDeleteModal();
  });

  // Close buttons
  cancelModalBtn.addEventListener('click', closeModal);
  cancelDeleteBtn.addEventListener('click', closeDeleteModal);
  
  // Initialize status text
  document.getElementById('categoryStatus').addEventListener('change', function() {
    updateStatusText(this.checked);
  });
});
</script>

<%- include('../partials/admin/admin-footer') %>