<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chettivan - OTP Verification</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Poppins:wght@300;400;500&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="generateotp.css">
</head>
<body>

  <div class="otp-container">
    <div class="otp-image">
      <div class="image-overlay">
        <h2>Secure Your Account</h2>
        <p>We're verifying your identity to protect your Chettinad account.</p>
        <div class="security-tips">
          <p><i class="fas fa-shield-alt"></i> Never share your OTP with anyone</p>
          <p><i class="fas fa-envelope"></i> Check your spam folder if you don't see our email</p>
          <p><i class="fas fa-clock"></i> OTP expires in 5 minutes</p>
        </div>
      </div>
    </div>
    
    <div class="otp-form">
      <div class="form-header">
        <h1>CHETTINAD</h1>
        <p class="tagline">A Fort of Timeless Weaves</p>
      </div>
      
      <h3 class="otp-title">Enter OTP</h3>
      <p class="sub-text">We've sent a 6-digit code to your registered email</p>
      
      <div class="otp-timer">
        <span id="timer">05:00</span>
        <span>remaining</span>
      </div>
      
      <div class="otp-inputs">
        <input type="text" maxlength="1" pattern="[0-9]" inputmode="numeric">
        <input type="text" maxlength="1" pattern="[0-9]" inputmode="numeric">
        <input type="text" maxlength="1" pattern="[0-9]" inputmode="numeric">
        <input type="text" maxlength="1" pattern="[0-9]" inputmode="numeric">
        <input type="text" maxlength="1" pattern="[0-9]" inputmode="numeric">
        <input type="text" maxlength="1" pattern="[0-9]" inputmode="numeric">
      </div>
      
      <button class="verify-btn">Verify OTP</button>
      
      <div class="resend-otp">
        <p>Didn't receive the code?</p>
        <a href="#" id="resend-link">Resend OTP</a>
      </div>
    </div>
  </div>

  <script>
    // 5-minute countdown timer
    let minutes = 4;
    let seconds = 59;
    const timer = document.getElementById('timer');
    const resendLink = document.getElementById('resend-link');
    let timerActive = true;
    
    const interval = setInterval(() => {
      if (seconds === 0) {
        if (minutes === 0) {
          clearInterval(interval);
          timerActive = false;
          resendLink.style.color = "var(--primary-color)";
          resendLink.style.cursor = "pointer";
          resendLink.style.textDecoration = "underline";
          return;
        }
        minutes--;
        seconds = 59;
      } else {
        seconds--;
      }
      
      const formattedSeconds = seconds < 10 ? `0${seconds}` : seconds;
      timer.textContent = `0${minutes}:${formattedSeconds}`;
    }, 1000);
    
    // Auto-focus and move between OTP inputs
    const inputs = document.querySelectorAll('.otp-inputs input');
    
    inputs.forEach((input, index) => {
      input.addEventListener('input', (e) => {
        if (e.target.value.length === 1) {
          if (index < inputs.length - 1) {
            inputs[index + 1].focus();
          }
        }
      });
      
      input.addEventListener('keydown', (e) => {
        if (e.key === 'Backspace' && e.target.value.length === 0) {
          if (index > 0) {
            inputs[index - 1].focus();
          }
        }
      });
    });
    
    // Resend OTP functionality
    resendLink.addEventListener('click', (e) => {
      if (!timerActive) {
        e.preventDefault();
        minutes = 4;
        seconds = 59;
        timerActive = true;
        resendLink.style.color = "var(--text-color)";
        resendLink.style.cursor = "default";
        resendLink.style.textDecoration = "none";
        
        // In a real app, you would resend the OTP here
        
        const newInterval = setInterval(() => {
          if (seconds === 0) {
            if (minutes === 0) {
              clearInterval(newInterval);
              timerActive = false;
              resendLink.style.color = "var(--primary-color)";
              resendLink.style.cursor = "pointer";
              resendLink.style.textDecoration = "underline";
              return;
            }
            minutes--;
            seconds = 59;
          } else {
            seconds--;
          }
          
          const formattedSeconds = seconds < 10 ? `0${seconds}` : seconds;
          timer.textContent = `0${minutes}:${formattedSeconds}`;
        }, 1000);
      }
    });
  </script>
</body>
</html>